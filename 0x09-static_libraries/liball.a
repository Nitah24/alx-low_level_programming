!<arch>
0-isupper.c/    0           0     0     644     237       `
#include "main.h"

/**
 * _isupper - checks for uppercase letter
 * @c: character to be checked
 * Return: 1 if uppercase and 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     299       `
#include "main.h"

/**
 * _memset-fills memory with a constant byte
 * @s: pointer
 * @b: constant byte to fill n
 * @n: memory bytes pointed to
 * Return: a pointer to s
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;

	for (i = 0; i < n; i++)
	{
	s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     374       `
#include "main.h"
#include <stdio.h>

/**
 * _strcat-concatenates two strings
 * @dest:Destination string
 * @src:Source string
 * Return: A pointer to the new string
 */

char *_strcat(char *dest, char *src)
{
	int dlen = 0, i;

	while (dest[dlen])
	{
		dlen++;
	}
	for (i = 0; src[i] != 0; i++)
	{
		dest[dlen] = src[i];
		dlen++;
	}
	dest[dlen] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     413       `
#include "main.h"

/**
 * _atoi - convert string into integer
 * @s: string to convert
 * Return: integer
 */

int _atoi(char *s)
{
	int sig = 1, i = 0;
	unsigned int unsig = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sig *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		unsig = (unsig * 10) + (s[i] - '0');
	}
	unsig *= sig;
	return (unsig);
}

1-isdigit.c/    0           0     0     644     233       `
#include "main.h"

/**
 * _isdigit- cheks if a character is a digit
 * @c: number to be checked
 * Return: 1 if digit and 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     288       `
#include "main.h"

/**
 * _memcpy-copies memory area
 * @dest: destination
 * @src: source
 * @n: number of bytes
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     387       `
#include "main.h"

/**
 * _strncat -concatenates two strings.
 * @dest: destination string
 * @src: source string
 * @n: number of bytes
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
	{
		dest_len++;
	}
	for (index = 0; src[index] && index < n; index++)
	{
		dest[dest_len++] = src[index];
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     327       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr-locates a character in a string
 * @s:string to check
 * @c: character to be located
 * Return: pointer to c occurance or NULL
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return (NULL);
}

2-strlen.c/     0           0     0     644     216       `
#include "main.h"

/**
 * _strlen- returns the length of a string
 * @s: strring to be checked
 * Return: length of string
 */
int _strlen(char *s)
{
	int length = 0;

while (*s++)
{
length++;
}

return (length);

}
2-strncpy.c/    0           0     0     644     439       `
#include "main.h"

/**
 * _strncpy-copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of times
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int index = 0, src_len = 0;

	while (src[index++])
	{
		src_len++;
	}
	for (index = 0; src[index] && index < n; index++)
	{
		dest[index] = src[index];
	}
	for (index = src_len; index < n; index++)
	{
		dest[index] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     234       `
#include "main.h"

/**
 * _islower - returns 1 if c is lowercase
 * @c: parameter to check
 * Return: 1 for lowercase and 0 for other
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     221       `
#include "main.h"

/**
 * _puts- prints a string, a new line, to stdout
 * @str: string to be printed
 * Return: nothing
 */
void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     249       `
#include "main.h"

/**
 * _strcmp-compare two strings
 * @s1: sting to compare
 * @s2: second string
 * Return: the compared value
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     434       `
#include "main.h"

/**
 * _strspn-gets the length of a prefix substring
 * @s: string
 * @accept: another string
 * Return: number of bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, n, value;

	value = 0;

	for (i = 0; s[i]; i++)
	{
		for (n = 0; accept[n]; n++)
		{
			if (s[i] == accept[n])
			{
				value++;
				break;
			}
			else if (accept[n + 1] == '\0')
				return (value);
		}
	}
	return (value);
}
4-isalpha.c/    0           0     0     644     232       `
#include "main.h"

/**
 * _isalpha - prints alphanumerics
 * @c: to be checked
 * Return: 1 if a letter, 0 if not
 */
int _isalpha(int c)
{
if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
{
	return (1);
}
else
{
	return (0);
}
}
4-strpbrk.c/    0           0     0     644     369       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk -searches a string for any set of bytes
 * @s: first string
 * @accept: 2nd string
 * Return: pointer to occurances
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     571       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr-locates a substring
 * @haystack: string to search
 * @needle: string to find
 * Return: ponter to needle
 */

char *_strstr(char *haystack, char *needle)
{
	int i, j;

	if (*needle == '\0')
	{
		return (haystack);
	}

	for (i = 0; *(haystack + i) != '\0'; i++)
	{
		if (*(haystack + i) == *needle)
		{
			for (j = 0; *(needle + j) != '\0'; j++)
			{
				if (*(haystack + i + j) != *(needle + j))
				{
					break;
				}
			}
			if (*(needle + j) == '\0')
			{
				return (haystack + i);
			}
		}
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     226       `
#include "main.h"

/**
 * _abs- function to print absolute value
 * @c: value to be checked
 * Return: absolute value
 */
int _abs(int c)
{
if (c < 0)
{
	int abslt;

	abslt = c * -1;
	return (abslt);
}
else
{
	return (c);
}
}
9-strcpy.c/     0           0     0     644     269       `
#include "main.h"

/**
 * _strcpy- copy a string
 * @dest: copied to
 * @src: string copied
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     195       `
#include <unistd.h>

/**
 * _putchar - writes a character  to stdio
 * @c: character to be written
 * Return: On success 1
 * on error, -1
 */

int _putchar(char c)
{
return (write(1, &c, 1));
}

